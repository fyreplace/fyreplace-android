plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-kapt"
    id "com.google.protobuf"
    id "androidx.navigation.safeargs.kotlin"
    id "dagger.hilt.android.plugin"
    id "com.github.triplet.play"
}

def getVersionNumber = { ->
    def versionNumber = new ByteArrayOutputStream()
    def branch = new ByteArrayOutputStream()
    def versionNumberSuffix = "3"

    exec {
        commandLine "git", "rev-parse", "--abbrev-ref", "HEAD"
        standardOutput = branch
    }

    exec {
        commandLine "git", "rev-list", "--count", "HEAD"
        standardOutput = versionNumber
    }

    switch (branch.toString().split("/")[0].trim()) {
        case "develop":
            versionNumberSuffix = "0"
            break
        case "release":
            versionNumberSuffix = "1"
            break
        case "hotfix":
            versionNumberSuffix = "2"
            break
    }

    return Integer.parseInt(versionNumber.toString().trim() + versionNumberSuffix)
}

def getVersionString = { ->
    def versionString = new ByteArrayOutputStream()

    exec {
        commandLine "git", "describe", "--tags"
        standardOutput = versionString
    }

    return versionString.toString().substring(1).trim()
}

android {
    namespace 'app.fyreplace.fyreplace'
    compileSdk configuration.compileSdk

    defaultConfig {
        applicationId "app.fyreplace.fyreplace"
        minSdk configuration.minSdk
        targetSdk configuration.targetSdk
        versionCode getVersionNumber()
        versionName getVersionString()
        vectorDrawables.useSupportLibrary true
    }

    signingConfigs {
        release {
            def env = System.getenv()

            if (env["KEYSTORE_PATH"]) {
                storeFile file(env["KEYSTORE_PATH"])
                storePassword env["KEYSTORE_PASSWORD"]
                keyAlias env["KEY_ALIAS"]
                keyPassword env["KEY_PASSWORD"]
            }
        }
    }

    buildTypes {
        debug {}

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"

            if (System.getenv()["KEYSTORE_PATH"]) {
                signingConfig signingConfigs.release
            }
        }
    }

    buildFeatures { dataBinding true }

    flavorDimensions "freedom"

    productFlavors {
        google { dimension "freedom" }
        libre { dimension "freedom" }
    }
}

protobuf {
    protoc {
        artifact = libs.protobuf.protoc.get()
    }

    plugins {
        grpc {
            artifact = libs.grpc.protoc.java.get()
        }

        grpckt {
            artifact = libs.grpc.protoc.kotlin.get()
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
                kotlin {}
            }

            task.plugins {
                grpc {}
                grpckt {}
            }
        }
    }
}

play {
    serviceAccountCredentials.set(file("google-service-account.json"))
}

dependencies {
    implementation libs.bundles.androidx.lifecycle
    implementation libs.bundles.androidx.navigation
    implementation libs.bundles.androidx.recyclerview
    implementation libs.bundles.glide
    implementation libs.bundles.grpc
    implementation libs.androidx.appcompat
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.coordinatorlayout
    implementation libs.androidx.core
    implementation libs.androidx.exifinterface
    implementation libs.androidx.fragment
    implementation libs.androidx.paging
    implementation libs.androidx.preference
    implementation libs.androidx.swiperefreshlayout
    implementation libs.google.material
    implementation libs.hilt.hilt
    implementation libs.kotlinx.coroutines
    googleImplementation libs.google.play.services
    libreImplementation libs.conscrypt
    kapt libs.glide.glide.compiler
    kapt libs.hilt.hilt.compiler
}

kapt {
    correctErrorTypes = true
}
