plugins {
    id 'com.android.application'
    id 'com.google.protobuf'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.github.triplet.play' version '3.7.0'
}

def getVersionNumber = { ->
    def versionNumber = new ByteArrayOutputStream()
    def branch = new ByteArrayOutputStream()
    def versionNumberSuffix = '3'

    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = branch
    }

    exec {
        commandLine 'git', 'rev-list', '--count', 'HEAD'
        standardOutput = versionNumber
    }

    switch (branch.toString().split('/')[0].trim()) {
        case 'develop':
            versionNumberSuffix = '0'
            break
        case 'release':
            versionNumberSuffix = '1'
            break
        case 'hotfix':
            versionNumberSuffix = '2'
            break
    }

    return Integer.parseInt(versionNumber.toString().trim() + versionNumberSuffix)
}

def getVersionString = { ->
    def versionString = new ByteArrayOutputStream()

    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = versionString
    }

    return versionString.toString().substring(1).trim()
}

android {
    compileSdk configuration.compileSdk

    defaultConfig {
        applicationId "app.fyreplace.fyreplace"
        minSdk configuration.minSdk
        targetSdk configuration.targetSdk
        versionCode getVersionNumber()
        versionName getVersionString()
        vectorDrawables.useSupportLibrary true
    }

    signingConfigs {
        release {
            def env = System.getenv()

            if (env["KEYSTORE_PATH"]) {
                storeFile file(env["KEYSTORE_PATH"])
                storePassword env["KEYSTORE_PASSWORD"]
                keyAlias env["KEY_ALIAS"]
                keyPassword env["KEY_PASSWORD"]
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".dbg"
        }

        development {
            applicationIdSuffix ".dev"
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (System.getenv()["KEYSTORE_PATH"]) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "freedom"

    productFlavors {
        google { dimension "freedom" }
        libre { dimension "freedom" }
    }

    buildFeatures {
        dataBinding true
    }
}

protobuf {
    protoc {
        artifact = libraries.protoc
    }

    plugins {
        grpc {
            artifact = libraries.grpc.protoc
        }

        grpckt {
            artifact = libraries.grpc.protocKotlin
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {}
                kotlin {}
            }

            task.plugins {
                grpc {}
                grpckt {}
            }
        }
    }
}

play {
    serviceAccountCredentials.set(file("google-service-account.json"))
}

dependencies {
    kapt processors.glide
    implementation libraries.kotlinx.coroutines
    implementation libraries.androidx.appCompat
    implementation libraries.androidx.constraintLayout
    implementation libraries.androidx.coordinatorLayout
    implementation libraries.androidx.core
    implementation libraries.androidx.fragment
    implementation libraries.androidx.lifecycle.runtime
    implementation libraries.androidx.lifecycle.viewModel
    implementation libraries.androidx.navigation.fragment
    implementation libraries.androidx.navigation.ui
    implementation libraries.androidx.paging
    implementation libraries.androidx.preference
    implementation libraries.androidx.security
    implementation libraries.androidx.swipeRefreshLayout
    implementation libraries.glide.base
    implementation libraries.glide.okHttp
    implementation libraries.grpc.okHttp
    implementation libraries.grpc.protobuf
    implementation libraries.grpc.stub
    implementation libraries.grpc.stubKotlin
    implementation libraries.javax.annotation
    implementation libraries.koin
    implementation libraries.material
    implementation libraries.protobuf
    googleImplementation libraries.play.basement
    libreImplementation libraries.conscrypt
}
